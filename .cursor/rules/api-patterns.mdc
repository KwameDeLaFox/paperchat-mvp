# API Patterns & Best Practices

## Next.js API Routes Structure

### Basic API Route Template
```typescript
// pages/api/endpoint.ts
import type { NextApiRequest, NextApiResponse } from 'next';

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Handle different HTTP methods
  if (req.method === 'POST') {
    try {
      // Process request
      const result = await processRequest(req.body);
      res.status(200).json(result);
    } catch (error) {
      res.status(500).json({ error: 'Internal server error' });
    }
  } else {
    res.setHeader('Allow', ['POST']);
    res.status(405).end(`Method ${req.method} Not Allowed`);
  }
}
```

## PDF Upload API Pattern
```typescript
// pages/api/upload.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import formidable from 'formidable';
import pdf from 'pdf-parse';

export const config = {
  api: {
    bodyParser: false,
  },
};

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const form = formidable({
      maxFileSize: 10 * 1024 * 1024, // 10MB
      filter: ({ mimetype }) => mimetype === 'application/pdf',
    });

    const [fields, files] = await form.parse(req);
    const file = files.file?.[0];

    if (!file) {
      return res.status(400).json({ error: 'No PDF file provided' });
    }

    // Extract text from PDF
    const dataBuffer = await fs.readFile(file.filepath);
    const data = await pdf(dataBuffer);
    
    res.status(200).json({ 
      text: data.text,
      pages: data.numpages,
      filename: file.originalFilename 
    });
  } catch (error) {
    console.error('Upload error:', error);
    res.status(500).json({ error: 'Failed to process PDF' });
  }
}
```

## Chat API Pattern
```typescript
// pages/api/chat.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import OpenAI from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY || '',
});

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { message, documentText } = req.body;

    if (!message || !documentText) {
      return res.status(400).json({ error: 'Missing required fields' });
    }

    // Chunk text if too long
    const chunks = chunkText(documentText, 4000);
    
    const response = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `You are a helpful assistant. Answer questions based on the following document content: ${chunks[0]}`
        },
        {
          role: 'user',
          content: message
        }
      ],
      max_tokens: 500,
      temperature: 0.7,
    });

    res.status(200).json({ 
      response: response.choices[0].message.content 
    });
  } catch (error) {
    console.error('Chat error:', error);
    res.status(500).json({ error: 'Failed to get response' });
  }
}
```

## Error Handling Patterns

### Standard Error Response
```typescript
// Consistent error format
res.status(400).json({ 
  error: 'Descriptive error message',
  details: 'Optional additional details'
});
```

### Validation Errors
```typescript
// Input validation
if (!req.body.requiredField) {
  return res.status(400).json({ 
    error: 'Missing required field: requiredField' 
  });
}

// File validation
if (file.size > 10 * 1024 * 1024) {
  return res.status(400).json({ 
    error: 'File too large (max 10MB)' 
  });
}
```

### OpenAI API Errors
```typescript
try {
  const response = await openai.chat.completions.create({
    // ... config
  });
} catch (error) {
  if (error.code === 'insufficient_quota') {
    return res.status(429).json({ 
      error: 'API quota exceeded' 
    });
  }
  if (error.code === 'invalid_api_key') {
    return res.status(401).json({ 
      error: 'Invalid API key' 
    });
  }
  return res.status(500).json({ 
    error: 'AI service unavailable' 
  });
}
```

## Response Patterns

### Success Response
```typescript
res.status(200).json({
  success: true,
  data: result,
  message: 'Optional success message'
});
```

### File Upload Response
```typescript
res.status(200).json({
  filename: file.originalFilename,
  size: file.size,
  pages: numPages,
  text: extractedText
});
```

### Chat Response
```typescript
res.status(200).json({
  response: aiResponse,
  messageId: generateId(),
  timestamp: new Date().toISOString()
});
```

## Security Patterns

### Input Sanitization
```typescript
// Sanitize user input
const sanitizedMessage = message.trim().slice(0, 1000); // Limit length
```

### File Type Validation
```typescript
// Validate file type
const allowedTypes = ['application/pdf'];
if (!allowedTypes.includes(file.mimetype)) {
  return res.status(400).json({ error: 'Invalid file type' });
}
```

### Rate Limiting (Basic)
```typescript
// Simple in-memory rate limiting
const rateLimit = new Map();

export default async function handler(req, res) {
  const clientId = req.headers['x-forwarded-for'] || req.connection.remoteAddress;
  const now = Date.now();
  const windowMs = 60 * 1000; // 1 minute
  const maxRequests = 10;

  if (rateLimit.has(clientId)) {
    const requests = rateLimit.get(clientId).filter(time => now - time < windowMs);
    if (requests.length >= maxRequests) {
      return res.status(429).json({ error: 'Too many requests' });
    }
    requests.push(now);
    rateLimit.set(clientId, requests);
  } else {
    rateLimit.set(clientId, [now]);
  }
  
  // ... rest of handler
}
```

## Utility Functions

### Text Chunking
```typescript
function chunkText(text: string, maxLength: number): string[] {
  const chunks: string[] = [];
  let currentChunk = '';
  
  const sentences = text.split('. ');
  
  for (const sentence of sentences) {
    if ((currentChunk + sentence).length > maxLength) {
      if (currentChunk) {
        chunks.push(currentChunk.trim());
        currentChunk = sentence;
      } else {
        // Single sentence is too long, split by words
        const words = sentence.split(' ');
        for (const word of words) {
          if ((currentChunk + word).length > maxLength) {
            chunks.push(currentChunk.trim());
            currentChunk = word;
          } else {
            currentChunk += (currentChunk ? ' ' : '') + word;
          }
        }
      }
    } else {
      currentChunk += (currentChunk ? '. ' : '') + sentence;
    }
  }
  
  if (currentChunk) {
    chunks.push(currentChunk.trim());
  }
  
  return chunks;
}
```

---
globs: pages/api/**/*.ts
---
