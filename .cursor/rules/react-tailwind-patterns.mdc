# React and Tailwind CSS Patterns

## Component Structure
- Use functional components with TypeScript
- Prefer `React.FC<Props>` for component typing
- Use destructuring for props: `const Component: React.FC<Props> = ({ prop1, prop2 }) => {}`
- Export components as default exports

## State Management
- Use `useState` for local component state
- Use `useEffect` for side effects and lifecycle management
- Use `useCallback` for memoized functions passed as props
- Use `useMemo` for expensive computations
- Use `useRef` for DOM references and mutable values

## Event Handling
- Use camelCase for event handlers: `handleClick`, `handleSubmit`
- Use arrow functions for inline handlers: `onClick={() => handleClick()}`
- Prevent default behavior when needed: `e.preventDefault()`

## Conditional Rendering
- Use ternary operators for simple conditions: `{isVisible ? <Component /> : null}`
- Use logical AND for conditional rendering: `{isVisible && <Component />}`
- Use early returns for complex conditions

## List Rendering
- Always use `key` prop for list items
- Use stable keys (IDs, not array indices)
- Use `map()` for transforming arrays to JSX

## Tailwind CSS Patterns

## Layout
- Use Flexbox: `flex`, `flex-col`, `flex-row`, `items-center`, `justify-center`
- Use Grid: `grid`, `grid-cols-2`, `gap-4`
- Use responsive prefixes: `sm:`, `md:`, `lg:`, `xl:`
- Use container queries: `@container`

## Spacing
- Use consistent spacing scale: `p-4`, `m-2`, `gap-3`
- Use responsive spacing: `p-4 md:p-6 lg:p-8`
- Use negative margins sparingly: `-m-2`

## Colors
- Use semantic color classes: `text-primary`, `bg-secondary`
- Use opacity modifiers: `bg-blue-500/50`, `text-gray-600/75`
- Use hover/focus states: `hover:bg-blue-600`, `focus:ring-2`

## Typography
- Use semantic text sizes: `text-sm`, `text-lg`, `text-xl`
- Use font weights: `font-normal`, `font-medium`, `font-bold`
- Use text colors: `text-gray-900`, `text-muted-foreground`

## Components

## Buttons
```tsx
<button className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
  Button Text
</button>
```

## Cards
```tsx
<div className="p-6 bg-white rounded-lg shadow-md border border-gray-200">
  Card Content
</div>
```

## Forms
```tsx
<input 
  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
  placeholder="Enter text..."
/>
```

## Modals/Dialogs
```tsx
<div className="fixed inset-0 bg-black/50 flex items-center justify-center">
  <div className="bg-white rounded-lg p-6 max-w-md w-full mx-4">
    Modal Content
  </div>
</div>
```

## Loading States
```tsx
<div className="flex items-center justify-center p-8">
  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
</div>
```

## Responsive Design
- Mobile-first approach: `w-full md:w-auto`
- Breakpoint prefixes: `sm:`, `md:`, `lg:`, `xl:`, `2xl:`
- Container queries: `@container`

## Dark Mode
- Use CSS variables for theming
- Use `dark:` prefix for dark mode styles
- Ensure proper contrast ratios

## Performance
- Use `@apply` sparingly in CSS files
- Prefer utility classes over custom CSS
- Use `group` and `peer` for complex interactions
- Use `@layer` for organizing custom styles

## Accessibility
- Use semantic HTML elements
- Include proper ARIA attributes
- Ensure keyboard navigation
- Maintain proper color contrast
- Use focus indicators: `focus:ring-2 focus:ring-blue-500`

## Common Patterns

## Centered Content
```tsx
<div className="flex items-center justify-center min-h-screen">
  Centered Content
</div>
```

## Sidebar Layout
```tsx
<div className="flex h-screen">
  <aside className="w-64 bg-gray-100">
    Sidebar
  </aside>
  <main className="flex-1">
    Main Content
  </main>
</div>
```

## Responsive Grid
```tsx
<div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
  {items.map(item => (
    <div key={item.id} className="p-4 bg-white rounded-lg shadow">
      {item.content}
    </div>
  ))}
</div>
```

## Sticky Header
```tsx
<header className="sticky top-0 bg-white border-b border-gray-200 z-10">
  Header Content
</header>
```

## Error Boundaries
```tsx
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError(error) {
    return { hasError: true };
  }

  render() {
    if (this.state.hasError) {
      return <div className="p-4 text-red-600">Something went wrong.</div>;
    }
    return this.props.children;
  }
}
```
alwaysApply: true
---
