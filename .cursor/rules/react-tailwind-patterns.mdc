# React & Tailwind CSS Patterns

## React Component Structure
```jsx
// Component template
import React, { useState, useEffect } from 'react';

const ComponentName = ({ prop1, prop2 }) => {
  const [state, setState] = useState(initialValue);
  
  useEffect(() => {
    // Side effects
  }, [dependencies]);
  
  const handleEvent = () => {
    // Event handlers
  };
  
  return (
    <div className="container">
      {/* JSX content */}
    </div>
  );
};

export default ComponentName;
```

## Tailwind CSS Patterns

### Layout Classes
- `flex`, `grid` for layouts
- `justify-center`, `items-center` for centering
- `w-full`, `h-full` for full dimensions
- `p-4`, `m-4` for spacing
- `rounded-lg` for border radius

### Responsive Design
- `sm:`, `md:`, `lg:` prefixes for breakpoints
- `hidden sm:block` for responsive visibility
- `flex-col md:flex-row` for responsive layouts

### Component-Specific Styling

#### Upload Component
```jsx
// Use shadcn/ui components with default styling
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";

<div className="flex flex-col items-center justify-center min-h-screen p-4">
  <Card className="p-8 text-center">
    <CardContent>
      <input type="file" className="hidden" />
      <Button variant="default" size="lg">
        Choose PDF File
      </Button>
    </CardContent>
  </Card>
</div>
```

#### Chat Messages
```jsx
// Use shadcn/ui components with default styling
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";

// User message (right-aligned)
<div className="flex justify-end mb-4">
  <Card className="max-w-xs">
    <CardContent className="p-3">
      {message}
    </CardContent>
  </Card>
</div>

// AI message (left-aligned)
<div className="flex justify-start mb-4">
  <Card className="max-w-2xl">
    <CardContent className="p-3">
      {response}
      <div className="flex gap-2 mt-2">
        <Button variant="ghost" size="sm">üëç</Button>
        <Button variant="ghost" size="sm">üëé</Button>
      </div>
    </CardContent>
  </Card>
</div>
```

#### Split Layout
```jsx
<div className="flex h-screen">
  {/* PDF Viewer */}
  <div className="w-2/3 border-r">
    {/* PDF content */}
  </div>
  
  {/* Chat Interface */}
  <div className="w-1/3 flex flex-col">
    {/* Chat messages */}
    <div className="flex-1 overflow-y-auto p-4">
      {/* Messages */}
    </div>
    
    {/* Input */}
    <div className="border-t border-gray-200 p-4">
      {/* Input field */}
    </div>
  </div>
</div>
```

## State Management Patterns

### File Upload State
```jsx
const [file, setFile] = useState(null);
const [isUploading, setIsUploading] = useState(false);
const [uploadError, setUploadError] = useState(null);
```

### Chat State
```jsx
const [messages, setMessages] = useState([]);
const [inputValue, setInputValue] = useState('');
const [isLoading, setIsLoading] = useState(false);
```

### Document State
```jsx
const [document, setDocument] = useState(null);
const [documentText, setDocumentText] = useState('');
const [isDemoMode, setIsDemoMode] = useState(false);
```

## Event Handling Patterns

### File Upload
```jsx
const handleFileUpload = async (event) => {
  const file = event.target.files[0];
  if (!file) return;
  
  // Validation
  if (file.size > 10 * 1024 * 1024) {
    setUploadError('File too large (max 10MB)');
    return;
  }
  
  setIsUploading(true);
  try {
    // Upload logic
  } catch (error) {
    setUploadError('Upload failed');
  } finally {
    setIsUploading(false);
  }
};
```

### Chat Submission
```jsx
const handleSubmit = async (e) => {
  e.preventDefault();
  if (!inputValue.trim()) return;
  
  setIsLoading(true);
  try {
    // Send message logic
  } catch (error) {
    // Error handling
  } finally {
    setIsLoading(false);
  }
};
```

## Loading States
```jsx
// Upload loading
{isUploading && (
  <div className="flex items-center justify-center">
    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary"></div>
    <span className="ml-2">Processing...</span>
  </div>
)}

// Chat loading
{isLoading && (
  <div className="flex items-center space-x-2 text-muted-foreground">
    <div className="animate-pulse">AI is thinking...</div>
  </div>
)}
```

## Error States
```jsx
{error && (
  <Alert variant="destructive">
    <AlertDescription>
      {error}
    </AlertDescription>
  </Alert>
)}
```

## Mobile Responsiveness
```jsx
// Mobile-first approach
<div className="flex flex-col md:flex-row h-screen">
  {/* Content */}
</div>
```

---
alwaysApply: true
---
description:
globs:
alwaysApply: false
---
